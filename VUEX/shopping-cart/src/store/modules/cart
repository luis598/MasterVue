import shop from "../../api/shop";

export default {
  namespaced:true,
  state:{
    items:[],
    checkoutStatus: null,

  },
  getters: {
    cartProducts(state, getters, rootState, rootGetters){
      return state.items.map(cartItem => {
        const product = rootState.products.items.find(product => product.id === cartItem.id)
        return {
          title: product.title,
          price: product.price,
          quantity: cartItem.quantity,
        }

      })
    },
    cartTotal(state, getters){

      return getters.cartProducts.reduce((total,product) => total + product.price* product.quantity,0)
    },
  },
  actions: {
    addProductToCart({commit, state, getters, rootGetters}, product) {
      if (rootGetters['products/productIsInStock'](product)){
        const cartItem = state.items.find(item => item.id === product.id)
        if(!cartItem){
          //pushProductToCart
          commit('pushProductToCart', product.id)
        } else {
          //incrementItemQuantity
          commit('incrementItemQuantity', cartItem)
        }
      }
      commit('products/decrementProductInventory', product, {root:true})

    },
    checkout({commit, state}) {
      shop.buyProducts(
        state.items,
        () => {
          commit('emptyCart')
          commit('setCheckStatus', 'success')

        },
        () => {
          commit('setCheckStatus', 'fail')
        },
      )
    },
  },
  mutations:{
    pushProductToCart(state, productId){
      state.items.push({
        id: productId,
        quantity: 1,

      })
    },
    incrementItemQuantity(state, cartItem){
      cartItem.quantity++
    },
    setCheckStatus(state, status){
      state.checkoutStatus = status
    },
    emptyCart(state) {
      state.items=[]
    },
  },
}
